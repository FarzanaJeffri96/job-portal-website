# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# Define the stages for the pipeline in the order they should run
stages:
  - build
  - test
  - deploy

# Build stage: Compile code and handle artifacts
build-job:
  stage: build
  script:
    - echo "Compiling the code..."
    - echo "Compile complete."
  artifacts:
    paths:
      - docker-compose.yml  # Store docker-compose.yml as an artifact for use in later stages
      - prometheus.yml      # Store prometheus.yml as an artifact for use in later stages
      - Dockerfile           # Store Dockerfile as an artifact (optional, if needed later)

# Test stage: Run tests and check for necessary files
unit-test-job:
  stage: test
  script:
    - echo "Running unit tests..."
    - echo "Checking if necessary files are present..."
    - if [ -f docker-compose.yml ]; then echo "docker-compose.yml found"; else exit 1; fi
    - if [ -f prometheus.yml ]; then echo "prometheus.yml found"; else exit 1; fi
    - if [ -f Dockerfile ]; then echo "Dockerfile found"; else echo "Dockerfile not found, but continuing..."; fi
    - sleep 8
    - echo "Code coverage is 90%"
  dependencies:
    - build-job  # Ensure this job uses artifacts from the build-job

# Lint stage: Perform code linting
lint-test-job:
  stage: test
  script:
    - echo "Linting code... This will take about 6 seconds."
    - sleep 3
    - echo "No lint issues found."
  dependencies:
    - build-job  # Ensure this job uses artifacts from the build-job

# Deploy stage: Deploy the application
deploy-job:
  stage: deploy
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
    
  dependencies:
    - unit-test-job  # Ensure this job runs only after unit-test-job and lint-test-job are successful
    - lint-test-job
